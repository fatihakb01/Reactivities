Some dotnet commands:
- dotnet new list = shows all dotnet templates.
- dotnet new sln = creating a solution file template.
- dotnet new webapi -n API -controllers = creating a webapi folder/template (folder called API).
- dotnet new classlib -n Application = creating an application class folder.
- dotnet new classlib -n Domain = creating a domain class folder.
- dotnet new classlib -n Persistence = creating a persistence class folder.
- dotnet sln add API = add API folder to solution file.
- dotnet sln add Application = add Application folder to solution file.
- dotnet sln add Domain = add Domain folder to solution file.
- dotnet sln add Persistence = add Persistence folder to solution file.
- dotnet run = run a dotn.
- dotnet watch = hot reload enabled.
- dotnet create gitignore = creating a gitignore file.

8. Creating a domain entity
- In the Domain folder, we created an Activity class.
- If you go to the solution explorer, then you can find <Nullable>enable</Nullable> inside Domain.csproj.
- This makes sure that uninitialized/non-nullable properties get a warning
- As a solution, you can either initialize them, or make them required.

9. Creating the Entity Framework DbContext class
- This makes sure that the application is connected to the database
- We use NuGet Gallery to install packages: Microsoft.EntityFrameworkCore.Design & Microsoft.EntityFrameworkCore.Sqlite
- In the Persistence folder, we created an AppDbContext class that inherits from DbContext.
- A DbContext instance represents a session with the database and can be used to query and save instances of your entities. 
- DbContext is a combination of the Unit Of Work and Repository patterns.
- In our case, we created an instance of Activities (from the Activity class inside the Domain folder).

10. Creating an Entity Framework migration
- Make sure to add the connection string in the appsettings.Development.json.
- dotnet ef migrations add InitialCreate -p Persistence -s API = migrating the project to the database.
- dotnet ef database update -p Persistence -s API = Create the database with the corresponding tables.
- dotnet ef database drop -p Persistence -s API = Drop the database.

12. Seeding data into the database
- async keyword makes a method asynchronous, which allows to use the await keyword.
- await keyword makes sure that the thread is allowed to do other tasks, while waiting for a specific tasks.

13. Using Postman to test API Endpoints
- Postman is a nice application to test API endpoints

17. Creating the React project
- npm create vite@latest = create a vit/react project
- select 'React' as a framework, 'TypeScript + SWC', follow the rest of the instructions.
- npm run dev = run the project

18. Reviewing the React project files
- vite.config.ts shows the configurations for our vite project --> added port number of 3000 in here.
- main.tsx file is the core component of this project and imports all components (e.g. index.html, index.css and App.tsx)

20. Configuring CORS on the API
- CORS = Cross-Origin Resource Sharing
- Determines how data is shared across different domains (e.g. from locaslhost:5001 to localhost:3000)

21. Creating an Activity type in TypeScript
- In the src folder, we created a lib/types folder, which contains a file called index.d.ts.
- This file defined the activity type, which is neccessary in order to resolve the error with 'activity.id' and 'activity.title'.
- To prevent typos while creating a ts file, use a tool like JSON to TypeScript.

23. Adding Material UI
- Material UI (MUI) is an open-source React component library that implements Google's Material Design.
- We can use this library to improve our UI (things like Typography, ListItem, ListItemText, etc.)

24. Adding HTTPS support to the client application
- use the following cmd: npm install -D vite-plugin-mkcert
- In the vite.config.ts, you should specify:
    - import mkcert from 'vite-plugin-mkcert'
    - inside the plugins property: mkcert()
- To make sure that your back-end also trusts the certificate, you should use the following command 'dotnet dev-certs https --trust'

25. Adding Axios for data fetching
- Axios is a library to fetch data and this will be used to replace the fetch method of javascript.
- use 'npm install axios' to install axios.

30. Adding a mediator handler for a List
31. Adding a mediator handler for the Details
- Mediator is responsible for communicating from the Application to the API.
- This is neccessary in our project because our Application does not have access to our API.
- We defined our GetActivityList.cs in our Application folder, which handles the logic of retrieving the data.
- Then, we used that logic inside ActivitiesController.cs to actually retrieve the data from our API.
- Subsequently, we added our handler (GetActivityList class) as a service to our Program.cs
- Same principle applies for GetActivityDetails class.

35. Adding AutoMapper to the project
- We installed the AutoMapper with NuGet in order to map changes made from the request to the activity from the database.

37. Using Cancellation Tokens
- This token is useful when a (long) request is cancelled by the client
- The database needs to know when to stop a request after being cancelled.
- Our queries are quick, so we don't need it in our project.

38. Using the .NET debugger
- To create a debugger follow these steps:
1. Go to Run and Debug (Ctrl+Shift+D).
2. Click on "create a launch.json file".
3. Add the following configurations: ".NET: Attach to a .NET process" and ".NET: Launch C# project".
4. Make sure that the projectPath refers to the project where you added the breakpoints (in our case our API project).
5. Run the debugger and test the API with Post-man.

42. Creating a Nav bar
- We created navbar.tsx that contains a function, which we use as a component in App.tsx
- We also use CssBaseline component, which removes default padding on the top of the screen.

55. Setting up React query
- used for server-side state management
- React query is useful when you want your application to reach a consistent state across all components (i.e. configuring a global state).
- Install by using the following command: npm i @tanstack/react-query.
- Put the QueryClientProvider and QueryClient inside main.tsx.

56. React Query developer tools
- Install dev tools by using the following command: npm i @tanstack/react-query-devtools

Difference between .ts & .tsx files
- The .ts extension is used for pure TypeScript files. These files contain only TypeScript code without any JSX syntax. They are typically used for utility functions, classes, interfaces, and other TypeScript-specific features.
- The .tsx extension is used for TypeScript files that include JSX syntax. JSX is a syntax extension that allows you to write HTML-like code within JavaScript/TypeScript. This extension is commonly used for React components where JSX is prevalent.

77. Adding a filters component
- To install React calendar, use: npm install react-calendar

79. Formatting the dates
- To properly use formatted dates, use the following library: npm install date-fns

82. What is MobX?
- used for client-side state management
- Observables tells us which objects need to be reactive/observable
- Actions perform a certain action (i.e. a setter).
- Computed properties retrieve a certain value (i.e. a getter)

83. Setting up MobX
- Install: npm install mobx mobx-react-lite

103. Using an Axios interceptor to handle errors
- If an import error occurs, then go to 'client --> node_modules --> <folder>' to troubleshoot the issue.
- Use: npm install react-toastify --> in order to see errors on the client side

109. Setting up React hook form
- 'npm install react-hook-form' is used for setting up the form.
- 'npm install @hookform/resolvers zod' is used for validation within the form.

114. Creating reusable Date input
- 'npm install @mui/x-date-pickers' and 'npm install date-fns' to install a date picker library used for our date field.

119. Adding the map view
- Install the following:
    1. npm install react-leaflet@next
    2. npm install -D @types/leaflet

122. Adding the user entity
- NUGET install: Microsoft.AspNetCore.Identity.EntityFrameworkCore version 9.0.1.
- dotnet ef migrations add IdentityAdded -p Persistence -s API
- This makes sure that the user databases are added as well.

140. Configuring the relationship
- In order to configure a many-to-many relationship between Users and Activities, 
you can use the following command = dotnet-ef migrations add ActivityAttendeesAdded -p Persistence -s API
- However, this provides limitations because you can't add your own properties.
- Therefore, we created our own join class, called ActivityAttendee.cs and then used the command above.
- Install dotnet-ef if not installed already: dotnet tool install --global dotnet-ef.

141. Creating the infrastructure project
- dotnet new classlib -n Infrastructure
- dotnet sln add Infrastructure

149. Updating the seed data
- We drop our database in order to update the seed data (see command below).
- dotnet ef database drop -p Persistence -s API

163. Adding the image service
- Install CloudinaryDotNet with NuGet.
- Add CloudinarySettings inside appSettings.json.
- Create CloudinarySettings.cs class.
Add CloudinarySettings as a service inside Program.cs.

165. Creating a photo entity
- We added Photo as a Dbset inside our AppDbContext.cs.
- Therefore we need to use the following command: 
    - dotnet ef migrations add PhotoEntityAdded -p Persistence -s API

181. Adding React Dropzone
- Install: npm install --save react-dropzone.
- This will help with drag & dropping images inside the profile page (photo section).

182. Adding React Cropper
- Install: npm install react-cropper.
- This will help with resizing images during an upload.

190. Setting up the comment entity
- We added Comment as a Dbset inside our AppDbContext.cs.
- Therefore we need to use the following command:
    - dotnet ef migrations add CommentEntityAdded -p Persistence -s API

-- DTOs
- Domain models (Domain.Activity, User, etc.) represent your database entities and business rules.
- DTOs (ActivityDto, CreateActivityDto, EditActivityDto, etc.) represent what your API actually sends and receives.

---- Diagram
[Database]
   │
   ▼
[EF Core]
   │  (loads domain entities from DB)
   ▼
[Domain Model]  ←── Business logic / Persistence rules
   │
   │ AutoMapper (MappingProfiles.cs)
   ▼
[DTO]  ←── The safe, shaped version for the API
   │
   ▼
[Controller]  ←── Sends/receives DTOs
   │
   ▼
[API Response]  ←── JSON to frontend
   │
   ▼
[Frontend]  ←── React, consuming the shaped data

195. Client SignalR setup
- Install: npm install @microsoft/signalr

202. Adding the join entity
- We configured a relationship between 2 users in our AppDbContext.cs.
- That's why we did another migration using the following command: 
   - dotnet ef migrations add FollowerEntityAdded -p Persistence -s API
- If you want a SQL script of your migrations, then use:
   - dotnet ef migrations script -o test.sql -p Persistence -s API
